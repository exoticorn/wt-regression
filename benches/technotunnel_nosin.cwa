import "env.memory" memory(4);

fn time() -> f32 {
    (32!32) as f32 / 1000_f
}

fn setPixel(x: i32, y: i32, c: i32) {
    (x + y * 320)?120 = c;
}

fn sin(v: f32) -> f32 {
    v
}

export fn upd() {
    let x: i32;
    let y: i32;
    loop screen {
        let inline t = time() / 2 as f32;
        let lazy o = sin(t) * 0.75;
        let inline q = x as f32 - 160.5;
        let inline w = (y - 120) as f32;
        let lazy r = sqrt(q*q + w*w);
        let lazy z = q / r;
        let lazy s = z * o + sqrt(z * z * o * o + 1 as f32 - o * o);
        let inline q2 = (z * s - o) * 10 as f32 + t;
        let inline w2 = w / r * s * 10 as f32 + t;
        let inline s2 = s * 100 as f32 / r;
        let inline color = max(
            0 as f32, 
            ((q2 as i32 ^ w2 as i32 & ((s2 + time()) * 10 as f32) as i32) & 5) as f32 *
                (4 as f32 - s2) as f32
            ) as i32 - 32;
        setPixel(x, y, color);
        branch_if x := (x + 1) % 320: screen;
        branch_if y := (y + 1) % 240: screen;
    }
}